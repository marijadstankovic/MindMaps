// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindMaps.Data.Context;

namespace MindMaps.Migrations
{
    [DbContext(typeof(MindMapsContext))]
    [Migration("20210822115734_updateMindmapTable")]
    partial class updateMindmapTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MindMaps.Data.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MindMapId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MindMapId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.MindMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("XMLText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("MindMaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfCreation = new DateTime(2021, 8, 22, 13, 57, 34, 446, DateTimeKind.Local).AddTicks(6572)
                        });
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ChatID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatID = 1,
                            DateOfCreation = new DateTime(2021, 8, 22, 13, 57, 34, 442, DateTimeKind.Local).AddTicks(7644),
                            Name = "soba"
                        });
                });

            modelBuilder.Entity("MindMaps.Data.Entities.RoomUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("RoomUsers");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin",
                            LastName = "Adminovski",
                            Name = "Admin",
                            PasswordHash = new byte[] { 110, 242, 95, 246, 53, 222, 223, 77, 116, 255, 51, 98, 203, 194, 35, 125, 122, 75, 124, 140, 163, 106, 43, 15, 120, 177, 2, 241, 51, 143, 166, 254, 216, 222, 66, 105, 195, 9, 200, 252, 90, 199, 32, 112, 37, 32, 69, 92, 68, 59, 46, 151, 158, 167, 1, 233, 69, 134, 229, 142, 214, 208, 42, 51 },
                            PasswordSalt = new byte[] { 1, 229, 116, 148, 13, 35, 253, 161, 18, 171, 222, 41, 233, 186, 0, 23, 221, 103, 40, 108, 28, 175, 82, 99, 249, 95, 125, 82, 5, 215, 224, 82, 118, 66, 64, 30, 1, 139, 192, 3, 196, 144, 224, 23, 159, 171, 195, 138, 165, 99, 125, 6, 33, 88, 119, 191, 218, 14, 169, 57, 249, 115, 31, 173, 6, 200, 12, 184, 218, 186, 89, 112, 91, 28, 175, 43, 230, 30, 28, 125, 176, 52, 126, 238, 176, 170, 146, 40, 66, 139, 118, 185, 209, 77, 60, 86, 22, 161, 137, 37, 109, 20, 35, 244, 87, 211, 5, 113, 116, 105, 129, 49, 131, 181, 77, 172, 211, 209, 226, 213, 182, 119, 107, 98, 56, 128, 205, 119 }
                        });
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Comment", b =>
                {
                    b.HasOne("MindMaps.Data.Entities.MindMap", "MindMap")
                        .WithMany()
                        .HasForeignKey("MindMapId");

                    b.HasOne("MindMaps.Data.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Message", b =>
                {
                    b.HasOne("MindMaps.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("MindMaps.Data.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.MindMap", b =>
                {
                    b.HasOne("MindMaps.Data.Entities.Room", "Room")
                        .WithMany("MindMaps")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("MindMaps.Data.Entities.Room", b =>
                {
                    b.HasOne("MindMaps.Data.Entities.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MindMaps.Data.Entities.RoomUser", b =>
                {
                    b.HasOne("MindMaps.Data.Entities.Room", "Room")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindMaps.Data.Entities.User", "User")
                        .WithMany("RoomUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
